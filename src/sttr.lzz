#hdr
// STTR - STT Reflection Library
// By Liam Twigger - 2020
// @SnapperTheTwig
// Public Domain

#include <type_traits>
#include <vector>
#include <cassert>
#include <cstring>
#include <string>

#ifndef STTR_VISITOR_HEADER
	#include "sttr_visitor.h"
#endif
		
#define STTR_BTOS(B) (B ? "true" : "false")
#define STTR_CLASS_SIG(X) virtual void * sttr_getClassSig() const { return (void*) sttr::getTypeSignature<X>(); } \
						virtual const char * const sttr_getClassName() const { return sttr::getTypeName<X>(); }

// STTR_VISITORS Must be defined before #include "sttr.h"
//#define STTR_VISITORS \
//	STTR_ADD_VISITOR(visitoclass_x) \
//	STTR_ADD_VISITOR(visitoclass_y) \
//	STTR_ADD_VISITOR(visitoclass_z) 

//#define STTR_VISITORS
// \
	STTR_ADD_VISITOR(Typename_Extractor_Visitor);
namespace sttr {
	class RegNamespace;
	}

// Macro for registering field
#define STTR_REG(C,X) regField<C>(&C::X,#X)
#define STTR_REGF(C,X,F) regField<C,decltype(&C::X),F>(&C::X,#X).setUserFlags(F)

// Workaround for lazy-c++
#define STTR_VARADIC_TEMPLATE_ARGS1 ...ARGS
#define STTR_VARADIC_TEMPLATE_ARGS2 ARGS...

// SFINAE test for function existance
#define STTR_HAS_FUNC(func)												\
template <typename T>													\
class has_##func {														\
    typedef char one;													\
    struct two { char x[2]; };											\
    template <typename C> static one test( decltype(&C::func) ) ;		\
    template <typename C> static two test(...);    						\
public:																	\
    enum { value = (sizeof(test<T>(0)) == sizeof(char)) };				\
	};

namespace sttr {
	STTR_HAS_FUNC(sttr_getClassSig)		// creates class has_sttr_getClassSig<Class>
	STTR_HAS_FUNC(sttr_getClassName)	// creates class has_sttr_getClassName<Class>
	}

#end

#src
#end



namespace sttr {
	
class RegBase {
public:
	const char * name;
	bool isStatic;
	bool isConst;
	bool isVariable;
	bool isFunction;
	
	// Null values
	bool nullValueSet;
	double nullValueValue;
	// What owns this?
	RegNamespace * mNamespace;
	
	// For your usage
	uint32_t userFlags;
	std::string userString;
	void * userData;
	
	RegBase(const char * _name) : name(_name), isStatic(false), isConst(false), isVariable(false), isFunction(false), nullValueSet(false), nullValueValue(0.0), mNamespace(NULL), userFlags(0), userString(""), userData(NULL) {}
	virtual ~RegBase(){}
	
	virtual void* construct() { return (void *) 0; }
	
	virtual void visit(Visitor_Base * V) {}
	virtual void visitClass(Visitor_Base * V) {}
	//virtual void visitBaseClassTuple(Visitor_Base * V) {}
	
	virtual std::string getTypeName() { return ""; }
	virtual std::string getTypePointingTo() { return ""; }
	//virtual unsigned char const * getAddr() const { return 0; } // useless, just use getOffset
	virtual const unsigned long long int getOffset() const { return 0; }

	};
	
template<typename T>
void* construct_worker(T func, std::false_type isVariable) { return NULL; }
template<typename T>
void* construct_worker(T func, std::true_type isVariable) {
	using TBase = typename std::remove_pointer<T>::type;
	return (void*) constructIfDefaultConstructible<TBase>();
	}


template<typename T, typename CT, unsigned int FLAGS=0>
class Reg : public RegBase {
public:
	T func;
	
	Reg(T v, const char * _name) : RegBase(_name), func(v) {}
	virtual ~Reg(){}
	
	void visit(Visitor_Base * v) {
		// Upcast and get the right visitor
		#ifdef STTR_VISITORS
			STTR_VISITORS
		#else
			#warning STTR_VISITORS macro not defined! To suppress this warning define it as an empty string "#define STTR_VISITORS". To add a visitor use #define STTR_VISITORS STTR_ADD_VISITOR(visitoclass_type) STTR_ADD_VISITOR(anothevisitoclass_type) ... etc.
		#endif
		v->visit(this);
		}
		
	 void visitClass (Visitor_Base * v) {}
		
	void* construct() { return construct_worker(func, sttr::is_variable<T>()); }
	
	/// Returns the type of T as a human readable string
	std::string getTypeName() { return sttr::getTypeName<T>(); }
	std::string getTypePointingTo() { return sttr::getTypeName<decltype(sttr::getTypePointingTo(func))>(); }
	
	const unsigned long long int getOffset() const {
		const unsigned long long int * first = reinterpret_cast<const unsigned long long int *>(&func);
		unsigned char const * first2 = reinterpret_cast<unsigned char *>(*first);
		return reinterpret_cast<size_t>(first2);
		}
	};

template<typename T, unsigned int FLAGS>
class Reg<T, sttr::NullType, FLAGS> : public RegBase {
public:
	T func;
	
	Reg(T v, const char * _name) : RegBase(_name), func(v) {}
	virtual ~Reg(){}
	
	void visit(Visitor_Base * v) {}
	
	 void visitClass (Visitor_Base * v) {
		// Used for the actual class types (RegNamespace::thisClass)
		#ifdef STTR_CLASS_VISITORS
			STTR_CLASS_VISITORS
		#endif
		v->visitClass(this);
		}
	
	void* construct() { return construct_worker(func, sttr::is_variable<T>()); }
	
	/// Returns the type of T as a human readable string
	std::string getTypeName() { return sttr::getTypeName<T>(); }
	std::string getTypePointingTo() { return sttr::getTypeName<decltype(sttr::getTypePointingTo(func))>(); }
		
	const unsigned long long int getOffset() const {
		const unsigned long long int * first = reinterpret_cast<const unsigned long long int *>(&func);
		unsigned char const * first2 = reinterpret_cast<unsigned char *>(*first);
		return reinterpret_cast<size_t>(first2);
		}
	};


class RegNamespace {
public:
	RegNamespace * parent;
	const char * name;
	std::vector<RegBase*> members;
	std::vector<RegNamespace*>classes;  
	RegBase * thisClass; // Is not null if this represents a class
//	RegBase * baseClassTuple; // Holds a sttr::VaradicWrap<> of all base classes of this. So if this is Life->Animal->Cat this should contain <Life,Animal,Cat>. Create with storeBaseClassTuple
	void * thisClassSig;
	void * uninstantiatedParent; // Bases of classes that are derived from classes not yet registered here
	
	
	RegNamespace(const char * _name) : parent(NULL), name(_name), thisClass(NULL), thisClassSig(NULL), uninstantiatedParent(NULL) {}
	~RegNamespace() {
		for (RegBase * RB : members) delete RB;
		for (RegNamespace * RN : classes) delete RN;
		if (thisClass) delete thisClass;
//		if (baseClassTuple) delete baseClassTuple;
		}
		
	template <typename CT = sttr::NullType, typename T = sttr::NullType, unsigned int FLAGS=0>
	RegNamespace & regField(T v, const char * _name) {
		// for registration of anything
		RegBase * R = new Reg<T, CT, FLAGS>(v,_name);
		R->isFunction = sttr::is_function<T>::value;
		R->isVariable = sttr::is_variable<T>::value;
		R->isConst = sttr::is_const<T>::value;
		R->isStatic = sttr::is_static<T>::value;
		R->mNamespace = this;
		members.push_back(R);
		return *this;
		}
	template <typename CT, typename T>
	RegNamespace & regField(T CT::* v, const char * _name) {
		// easy reigstation of class members
		return regField<CT,T CT::*>(v, _name);
		}
		
	RegNamespace & setUserFlags (const uint32_t & userFlags) {
		// Sets the userFlags for the last inserted member
		assert (members.size() && "Trying to sttr::RegNamespace::setUserFlags without registering a field");
		RegBase * R = members[members.size()-1];
		R->userFlags = userFlags;
		return *this;
		}
	RegNamespace & setUserString (const std::string & userString) {
		// Sets the userString for the last inserted member
		assert (members.size() && "Trying to sttr::RegNamespace::setUserString without registering a field");
		RegBase * R = members[members.size()-1];
		R->userString = userString;
		return *this;
		}
	RegNamespace & setUserData (void * userData) {
		// Sets the userString for the last inserted member
		assert (members.size() && "Trying to sttr::RegNamespace::setUserData without registering a field");
		RegBase * R = members[members.size()-1];
		R->userData = userData;
		return *this;
		}
		
	RegNamespace & setClassUserFlags (const uint32_t & userFlags) {
		// Sets the userFlags for the last inserted member
		assert (thisClass && "Trying to sttr::RegNamespace::setClassUserFlags with a namespace that is not a class");
		thisClass->userFlags = userFlags;
		return *this;
		}
	RegNamespace & setClassUserString (const std::string & userString) {
		// Sets the userString for the last inserted member
		assert (thisClass && "Trying to sttr::RegNamespace::setClassUserString with a namespace that is not a class");
		thisClass->userString = userString;
		return *this;
		}
	RegNamespace & setClassUserData (void * userData) {
		// Sets the userString for the last inserted member
		assert (thisClass && "Trying to sttr::RegNamespace::setClassUserData with a namespace that is not a class");
		thisClass->userData = userData;
		return *this;
		}
	uint32_t getClassUserFlags () const {
		// Sets the userFlags for the last inserted member
		assert (thisClass && "Trying to sttr::RegNamespace::getClassUserFlags with a namespace that is not a class");
		return thisClass->userFlags;
		}
	std::string setClassUserString () const {
		// Sets the userString for the last inserted member
		assert (thisClass && "Trying to sttr::RegNamespace::getClassUserString with a namespace that is not a class");
		return thisClass->userString;
		}
	void* getClassUserData () const {
		// Sets the userString for the last inserted member
		assert (thisClass && "Trying to sttr::RegNamespace::getClassUserData with a namespace that is not a class");
		return thisClass->userData;
		}
		
	template<typename T, unsigned int FLAGS=0>
	RegNamespace & beginClass(const char * _name) {
		RegNamespace * R = new RegNamespace(_name);
		R->parent = this;
		R->thisClass = new Reg<T*, sttr::NullType, FLAGS>(NULL, _name);
//		R->baseClassTuple = new Reg<VaradicWrap<>*, T>(NULL, "");
		R->thisClassSig = sttr::getTypeSignature<T>();
		classes.push_back(R);
		
		// Find any children and add them
		RegNamespace * Base = getBaseClass();
		void * thisSig = sttr::getTypeSignature<T>();
		for (size_t i = 0; i < Base->classes.size(); ++i) {
			if (Base->classes[i]->uninstantiatedParent == thisSig) {
				Base->classes[i]->uninstantiatedParent = NULL;
				R->classes.push_back(Base->classes[i]);
				Base->classes[i]->parent = R;
				Base->classes.erase(Base->classes.begin() + i);
				--i;
				}
			}
		
		return *R;
		}
	
//	template<typename CT, typename STTR_VARADIC_TEMPLATE_ARGS1>
//	void storeBaseClassTuple() {
//		// Sets the polymorphic chain for this type.
//		// You can extract it with visitor
//		// Needs c++17
//		if (baseClassTuple) delete baseClassTuple;
//		using tupleType = VaradicWrap<STTR_VARADIC_TEMPLATE_ARGS2>;
//		baseClassTuple = new Reg<tupleType*, CT>(NULL, "");
//		}
	
//	void visitBaseClassTuple(Visitor_Base * v) {
//		if (baseClassTuple) baseClassTuple->visit(v);
//		}
	
	template<typename BASE, typename DERIVED>
	RegNamespace & deriveClass(const char * name) {
		/// Can be used to define a class even if its parent hasn't be defined yet.
		// Should only be used for a base of a tree
		assert((!parent) && "sttr::RegNamespace::deriveClass being called on a RegNamespace that is not the base (it has a parent)");
		
		
		void* baseSig = sttr::getTypeSignature<BASE>();
		RegNamespace * R = findClassPointerBySig(baseSig);
		if (R) {
			RegNamespace & RR = R->beginClass<DERIVED>(name);
//			RR.storeBaseClassTuple<DERIVED,BASE>();
			return RR;
			}
			
		RegNamespace & RR = beginClass<DERIVED>(name);
//		RR.storeBaseClassTuple<DERIVED, BASE>();
		RR.uninstantiatedParent = baseSig;
		return RR;
		}
		
	RegNamespace & endClass() {
		if (parent) return *parent;
		return *this;
		}
	
	// Constructs an instance of this class. Does no safety checking!
	void* construct_retVoidPtr() {
		if (thisClass)
			return thisClass->construct();
		return NULL;
		}
	
	// Constructs and casts to T*. Does no safety checking!
	template<typename T>
	T * construct() {
		return (T*) construct_retVoidPtr();
		}
	
	// Returns a T* if V is a child class of T
	template<typename T, typename V>
	T * safeUpcast(V * v) {
		//std::cout << "safe upcast: " << sttr::getTypeName<V>() << " to " << sttr::getTypeName<T>() << ", actual class = " << findClassPointerBySig(v->sttr_getClassSig())->name << std::endl;
		RegNamespace * R = findClassPointerBySig(sttr::getTypeSignature<T>());
		if (!R) return NULL;
		//std::cout << "found R!! : " << sttr::getTypeName<V>() << " to " << sttr::getTypeName<T>() << std::endl;
		if (R->isDerivedFromSig(v->sttr_getClassSig())) return (T*) v;
		return NULL;
		}
	
	RegNamespace & findClass(const char * class_name) {
		RegNamespace * R = findClassPointer(class_name);
		assert(R && "sttr::RegNamespace::findClass : class not found");
		return *R;
		}
	
	RegNamespace * findClassPointer(const char * class_name) {
		for (RegNamespace * R : classes) {
			if (R->thisClass) {
				//std::cout << "comp a: " << name << "->" << R->thisClass->name << " " << class_name << std::endl;
				if (!strcmp(R->thisClass->name, class_name))
					return R;
				}
			}
		for (RegNamespace * R : classes) {
			RegNamespace * R2 = R->findClassPointer(class_name);
			if (R2)
				return R2;
			}
		return NULL;
		}
	
	RegNamespace * findClassPointerBySig(void * target) {
		if (target == thisClassSig) return this;
		for (RegNamespace * R : classes) {
			if (R->thisClass) {
				//std::cout << "comp b: " << name << "->" << R->name << " " << R->thisClassSig << " " << target<< std::endl;
				if (R->thisClassSig == target)
					return R;
				}
			}
		for (RegNamespace * R : classes) {
			RegNamespace * R2 = R->findClassPointerBySig(target);
			if (R2)
				return R2;
			}
		return NULL;
		}
		
	RegNamespace * getBaseClass() {
		// Returns the base class of this class
		if (thisClass && parent) {
			if (parent->thisClass)
				return parent->getBaseClass();
			}
		return this;
		}
		
	bool isDerivedFromSig(void * target) {
		// Returns true if this type is a instance of or derived from target
		if (thisClassSig == target) return true;
		if (parent) return parent->isDerivedFromSig(target);
		return false;
		}
	
	void visitRecursive(Visitor_Base * v) {
		// Recusively visits all classes and members. Goes down the tree
		for (RegNamespace * R : classes) {
			R->visitRecursive(v);
			}
		visit(v);
		}
		
	void visitPolymorthic(Visitor_Base * v) {
		// Recusively visits all classes and members, goes up the class tree
		// Classes are visited in order Base->Derived1->Derived2->...->This
		RegNamespace * R = this;
		if (!R) return;
		std::vector<RegNamespace*> chain;
		while (R->thisClass) {
			chain.push_back(R);
			R = R->parent;
			if (!R) break;
			}
		
		for (unsigned int i = chain.size()-1; i < chain.size(); --i) {
			chain[i]->visit(v);
			}
		}
		
	template <typename T>
	void visitPolymorthic (Visitor_Base * v, T * mClass) {
		// Calls visit for T. Searches the tree for the instance type. Requires sttr_getClassSig() to be defined for all classes in the chain
		RegNamespace * R = findClassPointerBySig(mClass->sttr_getClassSig());
		// Find the base class
		//std::cout << "mClass->sttr_getClassSig() " << mClass->sttr_getClassSig() << " this " << thisClass->name << " sig: " << thisClassSig <<  " R " << R << std::endl;
		if (!R) return;
		while (R->thisClass) {
			R->visit(v);
			R = R->parent;
			if (!R) break;
			}
		}
	
	void visit(Visitor_Base * v) {
		// Visits this class. Does not account for polymorthisim
		if (thisClass) thisClass->visitClass(v);
//		if (baseClassTuple) baseClassTuple->visitBaseClassTuple(v);
		for (RegBase * RB : members)
			RB->visit(v);
		}
	
	std::string toString(const int indent=0) const {
		std::string r = "";
		for (RegBase * RB : members) {
			r += std::string(indent,'\t') + "\tField: "+ RB->name + "\tTypedef: " + RB->getTypeName() + ", Pointing To: " + RB->getTypePointingTo()+ ", isStatic: " + STTR_BTOS(RB->isStatic) + " , isConst: " + STTR_BTOS(RB->isConst) + ", isFunction: " + STTR_BTOS(RB->isFunction) + ", isVariable: " + STTR_BTOS(RB->isVariable) + "\n";
			}
		for (RegNamespace * RS : classes) {
			r += std::string(indent,'\t') + "class " + RS->name + ":\n";
			r += RS->toString(indent+1);
			}
		return r;
		}
	
	
	std::string toClassTreeString(const int indent=0) const {
		std::string r = "";
		for (RegNamespace * RS : classes) {
			r += std::string(indent,'\t') + RS->name + "\n";
			r += RS->toClassTreeString(indent+1);
			}
		return r;
		}
	
	};
	
RegNamespace * getGlobalNamespace() {
	static RegNamespace R("global");
	return &R;
	}
	
}


